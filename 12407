import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.01):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.learning_rate = learning_rate

        # Initialize weights and biases
        self.weights_input_hidden = np.random.randn(input_size, hidden_size)
        self.biases_hidden = np.zeros((1, hidden_size))
        self.weights_hidden_output = np.random.randn(hidden_size, output_size)
        self.biases_output = np.zeros((1, output_size))

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def forward_pass(self, inputs):
        # Hidden layer
        self.hidden_layer_input = np.dot(inputs, self.weights_input_hidden) + self.biases_hidden
        self.hidden_layer_output = self.sigmoid(self.hidden_layer_input)

        # Output layer
        self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_output) + self.biases_output
        self.output_layer_output = self.sigmoid(self.output_layer_input)

    def backward_pass(self, inputs, target):
        # Output layer
        output_error = target - self.output_layer_output
        output_delta = output_error * self.sigmoid_derivative(self.output_layer_output)

        # Hidden layer
        hidden_layer_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_layer_delta = hidden_layer_error * self.sigmoid_derivative(self.hidden_layer_output)

        # Update weights and biases
        self.weights_hidden_output += self.learning_rate * self.hidden_layer_output.T.dot(output_delta)
        self.biases_output += np.sum(output_delta, axis=0, keepdims=True)
        self.weights_input_hidden += self.learning_rate * inputs.T.dot(hidden_layer_delta)
        self.biases_hidden += np.sum(hidden_layer_delta, axis=0, keepdims=True)

    def train(self, inputs, targets, epochs):
        for epoch in range(epochs):
            for i in range(len(inputs)):
                self.forward_pass(inputs[i])
                self.backward_pass(inputs[i], targets[i])

    def predict(self, inputs):
        self.forward_pass(inputs)
        return self.output_layer_output

# Example usage
# Assume a binary classification problem
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
targets = np.array([[0], [1], [1], [0]])

# Initialize and train the neural network
nn = NeuralNetwork(input_size=2, hidden_size=4, output_size=1, learning_rate=0.1)
nn.train(inputs, targets, epochs=10000)

# Test the trained neural network
for i in range(len(inputs)):
    prediction = nn.predict(inputs[i])
    print(f"Input: {inputs[i]}, Predicted Output: {prediction}")

